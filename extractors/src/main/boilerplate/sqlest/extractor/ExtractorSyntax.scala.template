/*
 * Copyright 2014 JHC Systems Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sqlest.extractor

import scala.language.experimental.macros

trait ExtractorSyntax[Row] {
  def extractConstant[A](value: A) = ConstantExtractor[Row, A](value)

  // The return type should just be `Any` as this is whitebox macro.
  // However the extended return type is included to overcome bugs in:
  //   - Scala compiler does not add `apply` sugar after macro expansion but it works with Dynamic
  //   - Intellij does not macro expand whitebox macros to determine the actual return type but it does understand the return type of `applyDynamic` and `applyDynamicNamed`
  def extract[A]: Dynamic { def applyDynamic(method: String)(args: Any*): Extractor[Row, A] with SimpleExtractor[Row, A]; def applyDynamicNamed(method: String)(namedArgs: (String, Any)*): Extractor[Row, A] with SimpleExtractor[Row, A] ; def apply(extractor: Extractor[Row, A] with SimpleExtractor[Row, A]): Extractor[Row, A] with SimpleExtractor[Row, A]} = 
    macro CaseClassExtractorMacro.apply[Row, A]

[2..22#  implicit def extractTuple[Row, [#A1#]](t: Tuple1[[#Extractor[Row, A1]#]]) =
    new Tuple1Extractor[Row, [#A1#]]([#t._1#])#

]

[2..22#  def extractTuple[Row, [#A1#]]([#e1: Extractor[Row, A1]#]) =
    new Tuple1Extractor[Row, [#A1#]]([#e1#])#

]

[2..22#  def extractCaseClass[Row, A, [#B1#]]([#e1: Extractor[Row, B1]#])(fn: ([#B1#]) => A): MappedExtractor[Row, ([#B1#]), A] =
    MappedExtractor(new Tuple1Extractor([#e1#]), fn.tupled)#

]

}
